// This source code is UTF-8 coded - see https://stackoverflow.com/questions/9180981/how-to-support-utf-8-encoding-in-eclipse
package stuffBeginnersDontHaveToUnderstand.random;


import stuffBeginnersDontHaveToUnderstand.Version;


/**
 * The class {@link RandomBasedOnPRBS32} implements the interface {@link RandomGenerator}.
 * The random is generated by a PRBS sequence in random mode.
 * 
 * @author  Michael Schaefers  ([UTF-8]:"Michael SchÃ¤fers");
 *          Px@Hamburg-UAS.eu
 * @version {@value #encodedVersion}
 */
public class RandomBasedOnPRBS32 implements RandomGenerator {
    //
    //--VERSION:-------------------------------#---vvvvvvvvv---vvvv-vv-vv--vv
    //  ========                               #___~version~___YYYY_MM_DD__dd_
    final static private long encodedVersion = 2___00001_002___2023_04_24__01L;
    //-----------------------------------------#---^^^^^-^^^---^^^^-^^-^^--^^
    final static private Version version = new Version( encodedVersion );
    /**
     * The method {@link #getDecodedVersion()} delivers the code version as reground/readable String.
     * @return version as decoded/readable String.
     */
    static public String getDecodedVersion(){ return version.getDecodedVersion(); }
    // Obiges (ab VERSION) dient nur der Versionierung.
    //
    // serial version unique ID is based on given code version
    final static private long  serialVersionUID = version.getEncodedVersion();
    
    
    
    
    
    final String thePolynominal = "16c840801";                                  // 33 bit polynominal in Hex with MSB on the left and LSB on the right side
    final long poly33b = 0b1000_0000__0001_0000__0010_0001__0011_0110__1L;      // 33 bit polynominal with LSB on the left and MSB on the right side
    final int polyWithOutMSB = (int)( poly33b >>> 1 );                          // 32 bit version,  the MSB known as 1 is missing
    
    private int signature;
    
    
    
    
    
    /**
     * Random Generator based on PRBS.
     * 
     * @param seed  is seed resp. start value for PRBS sequence.
     *              The seed MUST NOT be zero.
     */
    public RandomBasedOnPRBS32( long seed ){
        if( 0 == seed )  throw new IllegalArgumentException( "non zero value required for seed" );
        adjustSignatureLoop:
        while(true){
            signature = (int)( seed & 0xFFFF_FFFF );
            if( 0 != signature )  break adjustSignatureLoop;
            seed >>>= 1;
        }//while
        //\=> init/start value for signature is defined
    }//constructor()
    
    
    
    
    
    @Override
    public int nextInt( final int excludingMaximum ){
        if( 0 >= excludingMaximum)  throw new IllegalArgumentException( "natural resp. actual positive value required for excludingMaximum" );
        final boolean signatureMSBset = (0b1 == (signature & 0b1));
        signature >>>= 1;
        if( signatureMSBset )  signature ^= polyWithOutMSB;
        final int rawRandomValue = signature % excludingMaximum;
        final int randomValue = (0 > rawRandomValue) ? -rawRandomValue : rawRandomValue;
        return randomValue;
    }//method()
    
    
    @Override
    public String identifyImplementation(){
        return String.format(
            "%s  -  0x%s",
            getClass().getName(),
            thePolynominal
        );
    }//method()
    
}//class
